buildscript {
    repositories {
        jcenter()
        maven { url = "https://maven.minecraftforge.net/" }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

apply plugin: 'scala'
apply plugin: 'idea'

version = project.mod_ver
group = project.mod_group
archivesBaseName = project.mod_name

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

compileJava.options.encoding = "UTF-8"
compileScala.options.encoding = "UTF-8"

minecraft {
    version = "1.12.2-14.23.5.2846"
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20180814"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // Replacing stuff in the source
    // Currently stale, see mySourcesJava task
    replace "@VERSION@", project.mod_ver
    replace "@LAMBDA_LIB_VERSION@", project.lambdalib_ver
    replace "@MC_VERSION@", project.mc_ver

}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven"
    }
    maven {
        name = "private"
        url = "https://jitpack.io"
    }
    maven {
        name = "ic2"
        url = "http://maven.ic2.player.to"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        // The main host of CraftTweaker related libs
        name = "jared"
        url = "http://maven.blamejared.com"
    }
}

configurations {
    provided
    shade
    deobfCompile.extendsFrom shade
}

// sourceSets.main.compileClasspath += [configurations.provided]

idea {
    module {
        scopes.PROVIDED.plus += [configurations.provided]
    }
}


dependencies {
    // Shade dependencies
    shade "com.github.LambdaInnovation:LambdaLib2:${project.lambdalib_ver}"

    // Optional dependencies
    deobfCompile "codechicken:CodeChickenLib:1.12.2-${project.ccl_ver}:universal"
    deobfCompile "mezz.jei:jei_1.12.2:4.16.1.302"
    deobfCompile "cofh:RedstoneFlux:1.12-2.0.0.1:universal"
    deobfCompile "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.1.20.685"
    deobfCompile "CraftTweaker2:CraftTweaker2-API:4.1.20.685"
    deobfCompile "CraftTweaker2:ZenScript:4.1.20.685"
    deobfCompile "net.industrial-craft:industrialcraft-2:2.8.222-ex112"
}

//sourceSets.main.compileClasspath += [configurations.provided]

sourceSets.main {
    java.srcDirs = []
    scala.srcDirs = ['src/main/scala', 'build/tempSourcesJava']
}

idea {
    module {
        scopes.PROVIDED.plus += [configurations.provided]
        sourceDirs = [file('src/main/java'), file('src/main/scala')]
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

compileJava.options.encoding = "UTF-8"
compileScala.options.encoding = "UTF-8"

task deobfJar(type: Jar, dependsOn: 'jar') {
    classifier 'dev'
    from sourceSets.main.output
    manifest {
        attributes 'FMLCorePluginContainsFMLMod': 'true'
        attributes 'FMLCorePlugin': 'cn.lambdalib2.CorePlugin'
    }
}

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
            exclude 'mcmod.info'
            exclude 'pack.mcmeta'
        }
    }
    manifest {
        attributes 'FMLCorePluginContainsFMLMod': 'true'
        attributes 'FMLCorePlugin': 'cn.lambdalib2.CorePlugin'
    }
}

// http://www.minecraftforge.net/forum/topic/36791-trying-to-shade-dependencies-into-jar/
reobf {
    jar {
        // WARN: You can't shade apache httplib for several reasons
        // 1. it introduces some transitive dependencies, including logging, which is no good
        // 2. logging exploits a bug for srg (all .class calls' package names aren't transformed at all)

        // extraLines "PK: org/apache/commons/codec cn/academy/shade/org/apache/commons/codec"
        // extraLines "PK: org/apache/http cn/academy/shade/org/apache/http"
        // extraLines "PK: org/apache/commons/logging cn/academy/shade/org/apache/commons/logging"
    }
}

import org.apache.tools.ant.filters.ReplaceTokens

// see: https://stackoverflow.com/questions/30038540/replace-token-in-file-before-building-but-keep-token-in-sources
// Currently scala compilation task doesn't respect minecraft.replace options. We have to manually replace the tokens by ourselves.
// That also mean currently minecraft { replace ... } are all useless, but they are kept for future reference.
task mySourcesJava(type: Copy) {
    from 'src/main/java'
    into 'build/tempSourcesJava'
    filteringCharset = 'UTF-8'
    filter(ReplaceTokens, tokens: [VERSION: project.mod_ver])
    filter(ReplaceTokens, tokens: [LAMBDA_LIB_VERSION: "[" + project.lambdalib_ver + "]"])
    filter(ReplaceTokens, tokens: [MC_VERSION: project.mc_ver])
}

compileScala.dependsOn mySourcesJava
retromapReplacedMain.dependsOn compileScala
extractRangemapReplacedMain.dependsOn compileScala

artifacts {
    archives deobfJar
}